{"version":3,"file":"static/js/841.ce7f4d84.js","mappings":"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","sources":["../node_modules/tsparticles-shape-circle/esm/CircleDrawer.js","../node_modules/tsparticles-shape-circle/esm/index.js","../node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js","../node_modules/tsparticles-particles.js/esm/index.js","../node_modules/tsparticles-particles.js/esm/VincentGarreau/particles.js","../node_modules/tsparticles-plugin-easing-quad/esm/index.js","../node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js","../node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js","../node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js","../node_modules/tsparticles-shape-image/esm/Utils.js","../node_modules/tsparticles-shape-image/esm/ImageDrawer.js","../node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js","../node_modules/tsparticles-shape-image/esm/ImagePreloader.js","../node_modules/tsparticles-shape-image/esm/index.js","../node_modules/tsparticles-shape-line/esm/LineDrawer.js","../node_modules/tsparticles-shape-line/esm/index.js","../node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js","../node_modules/tsparticles-shape-polygon/esm/PolygonDrawer.js","../node_modules/tsparticles-shape-polygon/esm/TriangleDrawer.js","../node_modules/tsparticles-shape-polygon/esm/index.js","../node_modules/tsparticles-shape-square/esm/SquareDrawer.js","../node_modules/tsparticles-shape-square/esm/index.js","../node_modules/tsparticles-shape-star/esm/StarDrawer.js","../node_modules/tsparticles-shape-star/esm/index.js","../node_modules/tsparticles-shape-text/esm/TextDrawer.js","../node_modules/tsparticles-shape-text/esm/index.js","../node_modules/tsparticles-slim/esm/index.js"],"sourcesContent":["import { isObject } from \"tsparticles-engine\";\nexport class CircleDrawer {\n    draw(context, particle, radius) {\n        if (!particle.circleRange) {\n            particle.circleRange = { min: 0, max: Math.PI * 2 };\n        }\n        const circleRange = particle.circleRange;\n        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\n    }\n    getSidesCount() {\n        return 12;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: 360,\n            min: 0,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: 0,\n                max: (angle * Math.PI) / 180,\n            }\n            : { min: (angle.min * Math.PI) / 180, max: (angle.max * Math.PI) / 180 };\n    }\n}\n","import { CircleDrawer } from \"./CircleDrawer\";\nexport async function loadCircleShape(engine, refresh = true) {\n    await engine.addShape(\"circle\", new CircleDrawer(), refresh);\n}\n","import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n    static init(options) {\n        const particles = new Particles(), selector = options.selector;\n        if (!selector) {\n            throw new Error(\"No selector provided\");\n        }\n        const el = document.querySelector(selector);\n        if (!el) {\n            throw new Error(\"No element found for selector\");\n        }\n        tsParticles\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n            fullScreen: {\n                enable: false,\n            },\n            particles: {\n                color: {\n                    value: options.color ?? \"!000000\",\n                },\n                links: {\n                    color: \"random\",\n                    distance: options.minDistance ?? 120,\n                    enable: options.connectParticles ?? false,\n                },\n                move: {\n                    enable: true,\n                    speed: options.speed ?? 0.5,\n                },\n                number: {\n                    value: options.maxParticles ?? 100,\n                },\n                size: {\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\n                },\n            },\n            responsive: options.responsive?.map((responsive) => ({\n                maxWidth: responsive.breakpoint,\n                options: {\n                    particles: {\n                        color: {\n                            value: responsive.options?.color,\n                        },\n                        links: {\n                            distance: responsive.options?.minDistance,\n                            enable: responsive.options?.connectParticles,\n                        },\n                        number: {\n                            value: options.maxParticles,\n                        },\n                        move: {\n                            enable: true,\n                            speed: responsive.options?.speed,\n                        },\n                        size: {\n                            value: responsive.options?.sizeVariations,\n                        },\n                    },\n                },\n            })),\n        })\n            .then((container) => {\n            particles._container = container;\n        });\n        return particles;\n    }\n    destroy() {\n        const container = this._container;\n        container && container.destroy();\n    }\n    pauseAnimation() {\n        const container = this._container;\n        container && container.pause();\n    }\n    resumeAnimation() {\n        const container = this._container;\n        container && container.play();\n    }\n}\n","import { Particles } from \"./marcbruederlin/Particles\";\nimport { initParticlesJS } from \"./VincentGarreau/particles\";\nconst initPjs = (engine) => {\n    const { particlesJS, pJSDom } = initParticlesJS(engine);\n    window.particlesJS = particlesJS;\n    window.pJSDom = pJSDom;\n    window.Particles = Particles;\n    return { particlesJS, pJSDom, Particles };\n};\nexport { initPjs };\n","const initParticlesJS = (engine) => {\n    const particlesJS = (tagId, options) => {\n        return engine.load(tagId, options);\n    };\n    particlesJS.load = (tagId, pathConfigJson, callback) => {\n        engine\n            .loadJSON(tagId, pathConfigJson)\n            .then((container) => {\n            if (container) {\n                callback(container);\n            }\n        })\n            .catch(() => {\n            callback(undefined);\n        });\n    };\n    particlesJS.setOnClickHandler = (callback) => {\n        engine.setOnClickHandler(callback);\n    };\n    const pJSDom = engine.dom();\n    return { particlesJS, pJSDom };\n};\nexport { initParticlesJS };\n","import { addEasing } from \"tsparticles-engine\";\nexport async function loadEasingQuadPlugin() {\n    addEasing(\"ease-in-quad\", (value) => value ** 2);\n    addEasing(\"ease-out-quad\", (value) => 1 - (1 - value) ** 2);\n    addEasing(\"ease-in-out-quad\", (value) => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2));\n}\n","export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n","export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\n","import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n","import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n","import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n","export class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","import { Preload } from \"./Options/Classes/Preload\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n","import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n","export class LineDrawer {\n    draw(context, particle, radius) {\n        const shapeData = particle.shapeData;\n        context.moveTo(-radius / 2, 0);\n        context.lineTo(radius / 2, 0);\n        context.lineCap = shapeData?.cap ?? \"butt\";\n    }\n    getSidesCount() {\n        return 1;\n    }\n}\n","import { LineDrawer } from \"./LineDrawer\";\nexport async function loadLineShape(engine, refresh = true) {\n    await engine.addShape(\"line\", new LineDrawer(), refresh);\n}\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class PolygonDrawerBase {\n    draw(context, particle, radius) {\n        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;\n        if (!context) {\n            return;\n        }\n        context.beginPath();\n        context.translate(start.x, start.y);\n        context.moveTo(0, 0);\n        for (let i = 0; i < sideCount; i++) {\n            context.lineTo(side.length, 0);\n            context.translate(side.length, 0);\n            context.rotate(interiorAngle);\n        }\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? polygon?.nb_sides ?? 5));\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class PolygonDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / 3.5),\n            y: -radius / (2.66 / 3.5),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * 2.66) / (sides / 3),\n        };\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class TriangleDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / 1.66,\n        };\n    }\n    getSidesCount() {\n        return 3;\n    }\n    getSidesData(particle, radius) {\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: radius * 2,\n        };\n    }\n}\n","import { PolygonDrawer } from \"./PolygonDrawer\";\nimport { TriangleDrawer } from \"./TriangleDrawer\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    await engine.addShape(\"polygon\", new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    await engine.addShape(\"triangle\", new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n","const fixFactor = Math.sqrt(2);\nexport class SquareDrawer {\n    draw(context, particle, radius) {\n        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;\n        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n    }\n    getSidesCount() {\n        return 4;\n    }\n}\n","import { SquareDrawer } from \"./SquareDrawer\";\nexport async function loadSquareShape(engine, refresh = true) {\n    await engine.addShape([\"edge\", \"square\"], new SquareDrawer(), refresh);\n}\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class StarDrawer {\n    draw(context, particle, radius) {\n        const sides = particle.sides, inset = particle.starInset ?? 2;\n        context.moveTo(0, 0 - radius);\n        for (let i = 0; i < sides; i++) {\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius * inset);\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius);\n        }\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? star?.nb_sides ?? 5));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData, inset = getRangeValue(star?.inset ?? 2);\n        particle.starInset = inset;\n    }\n}\n","import { StarDrawer } from \"./StarDrawer\";\nexport async function loadStarShape(engine, refresh = true) {\n    await engine.addShape(\"star\", new StarDrawer(), refresh);\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { TextDrawer, validTypes } from \"./TextDrawer\";\nexport async function loadTextShape(engine, refresh = true) {\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n","import { initPjs } from \"tsparticles-particles.js\";\nimport { loadBasic } from \"tsparticles-basic\";\nimport { loadEasingQuadPlugin } from \"tsparticles-plugin-easing-quad\";\nimport { loadExternalAttractInteraction } from \"tsparticles-interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"tsparticles-interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"tsparticles-interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"tsparticles-interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"tsparticles-interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"tsparticles-interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"tsparticles-interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"tsparticles-interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"tsparticles-interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"tsparticles-interaction-external-slow\";\nimport { loadImageShape } from \"tsparticles-shape-image\";\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\nimport { loadLineShape } from \"tsparticles-shape-line\";\nimport { loadParallaxMover } from \"tsparticles-move-parallax\";\nimport { loadParticlesAttractInteraction } from \"tsparticles-interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"tsparticles-interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"tsparticles-interaction-particles-links\";\nimport { loadPolygonShape } from \"tsparticles-shape-polygon\";\nimport { loadRotateUpdater } from \"tsparticles-updater-rotate\";\nimport { loadSquareShape } from \"tsparticles-shape-square\";\nimport { loadStarShape } from \"tsparticles-shape-star\";\nimport { loadStrokeColorUpdater } from \"tsparticles-updater-stroke-color\";\nimport { loadTextShape } from \"tsparticles-shape-text\";\nexport async function loadSlim(engine, refresh = true) {\n    initPjs(engine);\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin();\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadTextShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n"],"names":["CircleDrawer","_classCallCheck","_createClass","key","value","context","particle","radius","circleRange","min","max","Math","PI","arc","container","_shapeData$angle","shapeData","angle","isObject","loadCircleShape","_x","_loadCircleShape","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","engine","refresh","_args","wrap","_context","prev","next","length","undefined","addShape","stop","Particles","this","_container","destroy","pause","play","options","_options$color","_options$minDistance","_options$connectParti","_options$speed","_options$maxParticles","_options$sizeVariatio","_options$responsive","particles","selector","Error","el","document","querySelector","tsParticles","replace","fullScreen","enable","color","links","distance","minDistance","connectParticles","move","speed","number","maxParticles","size","sizeVariations","responsive","map","_responsive$options","_responsive$options2","_responsive$options3","_responsive$options4","_responsive$options5","maxWidth","breakpoint","then","initPjs","_initParticlesJS","particlesJS","tagId","load","pathConfigJson","callback","loadJSON","catch","setOnClickHandler","pJSDom","dom","initParticlesJS","window","loadEasingQuadPlugin","_loadEasingQuadPlugin","addEasing","pow","InterlaceOffsets","InterlaceSteps","ByteStream","bytes","pos","data","Uint8ClampedArray","count","slice","reduce","acc","curr","String","fromCharCode","blockString","len","offset","blockData","Uint8Array","i","parseColorTable","byteStream","colors","push","r","g","b","parseExtensionBlock","_x2","_x3","_x4","_parseExtensionBlock","gif","getFrameIndex","getTransparencyIndex","frame","packedByte","transparencyFlag","transparencyIndex","applicationExtension","t0","nextByte","frames","GCreserved","disposalMethod","userInputDelayFlag","delayTime","nextTwoBytes","abrupt","identifier","getString","authenticationCode","readSubBlocksBin","applicationExtensions","comments","readSubBlocks","globalColorTable","EvalError","plainTextData","left","top","width","height","charSize","foregroundColor","backgroundColor","text","skipSubBlocks","parseImageBlock","_x5","_x6","_x7","_x8","_x9","_x10","_parseImageBlock","_callee2","avgAlpha","progressCallback","localColorTableFlag","interlacedFlag","localColorCount","getColor","image","minCodeSize","imageData","clearCode","readBits","code","dic","pass","pixelPos","lineIndex","last","_i","_getColor","a","_code","_size","_pos","_dic","_pixelPos","_last","_i2","_i3","_getColor2","_r","_g","_b","_a","_context2","sortFlag","reserved","localColorTable","index","_index","ImageData","colorSpace","error","DOMException","name","bytePos","bitPos","concat","set","x","y","createImageBitmap","bitmap","sent","parseBlock","_x11","_x12","_x13","_x14","_x15","_x16","_parseBlock","_callee3","_context3","getGIFLoopAmount","_step","_iterator","_createForOfIteratorHelper","s","n","done","extension","err","e","f","NaN","decodeGIF","_x17","_x18","_x19","_decodeGIF","_callee4","gifURL","res","buffer","globalColorTableFlag","globalColorCount","backgroundColorIndex","backgroundImage","_gif$globalColorTable","frameIndex","incrementFrameIndex","getframeIndex","_iterator2","_step2","_frame","_context4","fetch","ok","status","arrayBuffer","totalTime","colorRes","pixelAspectRatio","copyWithin","increment","newValue","Infinity","finish","t1","message","currentColorRegex","loadImage","_loadImage","Promise","resolve","loading","img","Image","element","addEventListener","getLogger","errorPrefix","source","src","loadGifImage","_loadGifImage","_getGIFLoopAmount","type","gifData","gifLoopCount","downloadSvgImage","_downloadSvgImage","response","svgData","replaceImageColor","_particle$opacity$val","_particle$opacity","_imageData$replaceCol","svgColoredData","imageShape","opacity","colorStyle","getStyleFromHsl","includes","preFillIndex","indexOf","substring","replaceColorSvg","imageRes","_objectSpread","loaded","ratio","replaceColor","replace_color","svg","Blob","domUrl","URL","webkitURL","url","createObjectURL","revokeObjectURL","img2","ImageDrawer","_this","loadImageShape","_ref","_ref2","_imageShape$replaceCo","_engine","images","delta","globalAlpha","_particle$gifFrame","_image$gifLoopCount","offscreenCanvas","OffscreenCanvas","offscreenContext","getContext","imageSmoothingQuality","imageSmoothingEnabled","clearRect","gifFrame","gifTime","scale","drawImage","putImageData","previousImageData","getImageData","_init","actualOptions","preload","_this2","shape","find","t","loadShape","_ref3","_this3","getFillColor","setTimeout","particleInit","_imageData$fill","_imageData$close","_image$ratio","fill","close","Preload","ImagePreloaderPlugin","id","preloadOptions","_loop","item","existing","addLoadImageToEngine","_data$gif","_data$name","imageFunc","_data$name2","_loadImageShape","preloader","_args2","addPlugin","LineDrawer","_shapeData$cap","moveTo","lineTo","lineCap","cap","loadLineShape","_loadLineShape","PolygonDrawerBase","start","getCenter","side","getSidesData","sideCount","numerator","denominator","decimalSides","interiorAngleDegrees","interiorAngle","beginPath","translate","rotate","_polygon$sides","polygon","round","getRangeValue","sides","nb_sides","PolygonDrawer","_PolygonDrawerBase","_inherits","_super","_createSuper","TriangleDrawer","loadGenericPolygonShape","_loadGenericPolygonShape","loadTriangleShape","_loadTriangleShape","loadPolygonShape","_loadPolygonShape","_args3","fixFactor","sqrt","SquareDrawer","fixedRadius","fixedDiameter","rect","loadSquareShape","_loadSquareShape","StarDrawer","_particle$starInset","inset","starInset","_star$sides","star","_star$inset","loadStarShape","_loadStarShape","validTypes","TextDrawer","_character$style","_character$weight","_character$font","character","textData","itemFromSingleOrMultiple","randomIndexData","style","weight","font","offsetX","fillText","strokeText","shapeOptions","promises","isInArray","executeOnSingleOrMultiple","loadFont","all","loadTextShape","_loadTextShape","loadSlim","_loadSlim","loadParallaxMover","loadExternalAttractInteraction","loadExternalBounceInteraction","loadExternalBubbleInteraction","loadExternalConnectInteraction","loadExternalGrabInteraction","loadExternalPauseInteraction","loadExternalPushInteraction","loadExternalRemoveInteraction","loadExternalRepulseInteraction","loadExternalSlowInteraction","loadParticlesAttractInteraction","loadParticlesCollisionsInteraction","loadParticlesLinksInteraction","loadLifeUpdater","loadRotateUpdater","loadStrokeColorUpdater","loadBasic"],"sourceRoot":""}